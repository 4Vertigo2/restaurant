CREATE TABLE RESTAURANT_TBL(
	RESTAURANT_ID int AUTO_INCREMENT,
	RESTAURANT_NAME varchar(50) NOT NULL,
	UNIQUE(RESTAURANT_NAME),
	PRIMARY KEY(RESTAURANT_ID)
);

CREATE TABLE LOGIN_TBL(
	LOGIN_ID int AUTO_INCREMENT,
	LOGIN_USERNAME varchar(50) NOT NULL,
	LOGIN_PASSWORD varchar(50) NOT NULL,
	LOGIN_STAFF BOOL NOT NULL DEFAULT 0,
	CHECK (7 < CHAR_LENGTH(LOGIN_PASSWORD)),
	UNIQUE(LOGIN_USERNAME),
	PRIMARY KEY(LOGIN_ID)
);

CREATE TABLE CUSTOMER_TBL(
	CUSTOMER_ID int AUTO_INCREMENT,
	CUSTOMER_FIRST_NAME varchar(50) NOT NULL,
	CUSTOMER_SURNAME varchar(50) NOT NULL,
	CUSTOMER_PHONE_NUMBER varchar(10) NOT NULL,
	LOGIN_ID int NOT NULL,
	CHECK (CHAR_LENGTH(CUSTOMER_PHONE_NUMBER) = 10),
	UNIQUE(CUSTOMER_PHONE_NUMBER),
	FOREIGN KEY(LOGIN_ID) REFERENCES LOGIN_TBL(LOGIN_ID),
	PRIMARY KEY(CUSTOMER_ID)
);

CREATE TABLE STAFF_TBL(
	STAFF_ID int AUTO_INCREMENT,
	STAFF_FIRST_NAME varchar(50) NOT NULL,
	STAFF_SURNAME varchar(50) NOT NULL,
	STAFF_PHONE_NUMBER varchar(10) NOT NULL,
	RESTAURANT_ID int NOT NULL,
	LOGIN_ID int NOT NULL,
	CHECK(CHAR_LENGTH(STAFF_PHONE_NUMBER) = 10),
	UNIQUE(STAFF_PHONE_NUMBER),
	FOREIGN KEY(RESTAURANT_ID) REFERENCES RESTAURANT_TBL(RESTAURANT_ID),
	FOREIGN KEY(LOGIN_ID) REFERENCES LOGIN_TBL(LOGIN_ID),
	PRIMARY KEY(STAFF_ID)
);

CREATE TABLE ORDER_TBL(
	ORDER_ID int AUTO_INCREMENT,
	ORDER_TIME DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	ORDER_STATUS int NOT NULL DEFAULT -1,
	ORDER_RATING int NOT NULL DEFAULT 0,
	STAFF_ID int NOT NULL,
	CUSTOMER_ID int NOT NULL,
	CHECK(ORDER_STATUS<2 AND ORDER_STATUS > -2),
	CHECK(ORDER_RATING<2 AND ORDER_RATING > -2),
	FOREIGN KEY(STAFF_ID) REFERENCES STAFF_TBL(STAFF_ID),
	FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER_TBL(CUSTOMER_ID),
	PRIMARY KEY(ORDER_ID)
);
DELIMITER //
CREATE PROCEDURE CALCULATEAVERAGE()
BEGIN
	SELECT STAFF_ID, AVG(ORDER_RATING) AS AVG_RATING FROM ORDER_TBL
	WHERE ORDER_RATING != 0.5
	GROUP BY STAFF_ID;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER ORDER_TRI BEFORE INSERT ON ORDER_TBL
FOR EACH ROW
BEGIN 
IF NEW.ORDER_RATING IS NULL THEN
SET NEW.ORDER_RATING=0.5;
END IF;
END;
//
DELIMITER ;

DELIMITER //

CREATE FUNCTION RatingLevel(
	avg_rating DECIMAL(10,2)
) 
RETURNS VARCHAR(25)
BEGIN
    DECLARE ratingLevel VARCHAR(25);
    IF avg_rating >= 0.75 THEN
		SET ratingLevel = 'High Positively Rated';
    ELSEIF (avg_rating >= 0.5 AND 
			avg_rating < 0.75) THEN
        SET ratingLevel = 'Positively Rated';
    ELSEIF (avg_rating >= 0.25 AND avg_rating < 0.5)THEN
        SET ratingLevel = 'Negatively Rated';
    ELSEIF avg_rating < 0.25 THEN
	  SET ratingLevel ='High Negatively Rated';
    END IF;
	RETURN (ratingLevel);
END//
DELIMITER ;

